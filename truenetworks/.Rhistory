license()
library(sparsebn)
install.packages("ccdrAlgorithm")
library(sparsebn)
install.packages("discretecdAlgorithm")
library(pcalg)
install.packages("abind")
data(pathfinder)
print(dags)
library(sparsebn)
library(pcalg)
data(pathfinder)
dat <- sparsebnData(pathfinder$data, type = "continuous", ivn = NULL)
library(pcalg)
install.packages("pcalg", dependencies = TRUE)
install.packages("sparsebn", dependencies = TRUE)
install.packages("sparsebn", dependencies = TRUE)
library(sparsebn)
library(pcalg)
data(pathfinder)
dat <- sparsebnData(pathfinder$data, type = "continuous", ivn = NULL)
nn <- num.samples(dat)
# number of samples in the dataset / equivalent to nrow(dat$data)
lambdas <- generate.lambdas(sqrt(nn),
0.05, lambdas.length = 50, scale = "linear")
start_time <- Sys.time()
dags <- estimate.dag(data = dat,
lambdas = lambdas,
verbose = FALSE)
print(dags)
# solution by sparsebn
solution <- select(dags, edges = 195)
end_time <- Sys.time()
print(end_time - start_time)
par(mfrow = c(1, 2), oma = rep(0, 4))
plotDAG(solution)
plot(solution,
layout = igraph::layout_(to_igraph(solution$edges), igraph::in_circle()),
vertex.label = NA,
vertex.size = 5,
vertex.label.color = gray(0),
vertex.color = gray(0.9),
edge.color = gray(0),
edge.arrow.size = 0.45
)
# original pathfinder graph
par(mfrow = c(1, 2), oma = rep(0, 4))
plotDAG(pathfinder$dag)
plot(pathfinder$dag,
layout = igraph::layout_(to_igraph(pathfinder$dag), igraph::in_circle()),
vertex.label = NA,
vertex.size = 5,
vertex.label.color = gray(0),
vertex.color = gray(0.9),
edge.color = gray(0),
edge.arrow.size = 0.45
)
solutionsbn <- to_graphNEL(to_edgeList(solution))
to_edgeList(solutionsbn$edges)
print(solutionsbn$edges)
truebn <- to_graphNEL(pathfinder$dag)
print(pathfinder$dag)
shd_result <- shd(solutionsbn$edges, truebn)
print(shd_result)
library(sparsebn)
library(pcalg)
data(pathfinder)
dat <- sparsebnData(pathfinder$data, type = "continuous", ivn = NULL)
nn <- num.samples(dat)
# number of samples in the dataset / equivalent to nrow(dat$data)
lambdas <- generate.lambdas(sqrt(nn),
0.05, lambdas.length = 50, scale = "linear")
gc()
library(sparsebn)
library(pcalg)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/hailfinder.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = "discrete")
dags <- estimate.dag(data = dat)
print(dags)
print(dags)
dags <- estimate.dag(data = dat)
dat <- sparsebnData(df, type = "discrete")
View(dat)
View(df)
View(dat)
View(dat)
View(df)
print(dags)
solution <- select(dags, edges = 68)
print(solution)
par(mfrow = c(1, 2), oma = rep(0, 4))
plotDAG(solution)
plot(solution,
layout = igraph::layout_(to_igraph(solution$edges), igraph::in_circle()),
vertex.label = NA,
vertex.size = 5,
vertex.label.color = gray(0),
vertex.color = gray(0.9),
edge.color = gray(0),
edge.arrow.size = 0.45
)
truebn <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/hailfinder_structure.csv", header = TRUE, sep = ",", check.names = FALSE)
solutionsbn <- to_graphNEL(to_edgeList(solution))
to_edgeList(solutionsbn$edges)
print(solutionsbn$edges)
truebn <- to_graphNEL(truebn)
print(truebn)
shd_result <- shd(solutionsbn$edges, truebn)
print(shd_result)
BiocManager::install("Rgraphviz")
library(BiDAG)
data <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/BiDAG_solution_write.R", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <-scoreparameters(scoretype = c("bdecat"), data, bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <- scoreparameters(scoretype = c("bdecat"), data, bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
scoreparameters(c('bdecat'), data)
scoreparameters(c('bdecat'), data = data)
scoreparameters(c('bdecat'), data = df)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <- scoreparameters(scoretype = c("bdecat"), data = df, bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scoreparameters(scoretype = c("bdecat"), data = df)
scoreparameters(c('bdecat'), data = df)
scoreparameters(c('bdecat'), data = df)
gc()
scoreparameters(c('bdecat'), data = df)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
df
scoprep
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
> library(BiDAG)
>
> data <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
>
> # bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
>
> scorep <- scoreparameters(scoretype = c("bdecat"), data, bdecatpar = list(chi = 0.5, edgepf = 2))
Error in 0:max(x) : NA/NaN argument
In addition: Warning message:
In as.vector(y) : NAs introduced by coercion
>
> x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
+                scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
+                alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
+                verbose = FALSE, startspace = NULL, blacklist = NULL,
+                startorder = NULL, scoretable = NULL)
Error in orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,  :
object 'scorep' not found
>
> n <- getDAG(x, amat = TRUE, cp = FALSE)
Error in getDAG(x, amat = TRUE, cp = FALSE) : object 'x' not found
>
> print(n)
Error in print(n) : object 'n' not found
> library(BiDAG)
> scoreparameters(c('bdecat'), data)
Error in 0:max(x) : NA/NaN argument
In addition: Warning message:
In as.vector(y) : NAs introduced by coercion
> scoreparameters(c('bdecat'), data = data)
Error in 0:max(x) : NA/NaN argument
In addition: Warning message:
In as.vector(y) : NAs introduced by coercion
> scoreparameters(c('bdecat'), data = df)
gc()
gc()
library(BiDAG)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
View(df)
scoreparameters(c('bdecat', df))
scoreparameters(c('bdecat'), df)
library(BiDAG)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- gsub(",", "", df)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
library(BiDAG)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
scorep <- scoreparameters(scoretype = c("bdecat"), data)
scorep <- scoreparameters(scoretype = c("bdecat"), df)
scorep <- scoreparameters(c("bdecat"), df)
scorep <- scoreparameters(c("mixed"), df)
scorep <- scoreparameters(c("bdecat"), df)
scorep <- scoreparameters(c("bde"), df)
scorep <- scoreparameters(c("bdecat"), df)
scorep <- scoreparameters(20, c("bdecat"), df)
scorep <- scoreparameters(c("bdecat"))
scorep <- scoreparameters(c("bdecat"), data)
scorep <- scoreparameters(c("bdecat"), data = df)
View(df)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
x <- orderMCMC(scorep)
n <- getDAG(x, amat = TRUE, cp = FALSE)
View(n)
library(igraph)
library(BiDAG)
library(igraph)
df <- read.csv("/Users/jerzykaminski/Documents/GitHub/sparsebndata/data/alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <- scoreparameters(scoretype = c("bdecat"), data = df)
x <- orderMCMC(scorep)
n <- getDAG(x, amat = TRUE, cp = FALSE)
g <- graph.adjacency(n)
get.edgelist(g)
el <- get.edgelist(g)
View(el)
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "arth150.rds")
fileConn<-file("arth150.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "arth150.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "ecoli70.rds")
fileConn<-file("ecoli70.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "ecoli70.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "magic-irri.rds")
fileConn<-file("magic-irri.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "magic-irri.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "magic-niab.rds")
fileConn<-file("magic-niab.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "magic-niab.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "magic-niab.rds")
fileConn<-file("magic-niab.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "magic-niab.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "magic-niab.rds")
fileConn<-file("magic-niab.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "magic-niab.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "ecoli70.rds")
fileConn<-file("ecoli70.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "ecoli70.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "arth150.rds")
fileConn<-file("arth150.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "arth150.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "magic-irri.rds")
fileConn<-file("magic-irri.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "magic-irri.txt", append=TRUE)
}
}
