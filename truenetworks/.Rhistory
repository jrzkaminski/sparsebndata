utils:::menuInstallPkgs()
q()
q()
q()
library(sparsebn)
library(igraph)
library(graph)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\pigs.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = "discrete")
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
solution <- select(dags, edges = 712)
print(solution)
edgelist <- to_igraph(solution)
x <- get.edgelist(edgelist$edges, names = TRUE)
write.csv(x, "C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\pigs_sparsebn_2.397322_hours.csv", row.names=FALSE)
library(sparsebn)
library(igraph)
library(graph)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\insurance.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = "discrete")
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\win95pts.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- df %>% select(where(~ n_distinct(.) > 1))
df %>% select(where(~ n_distinct(.) > 1))
df <- subset(df,select = lengths(sapply(df,unique))>1)
df
View(df)
df <- df %>% select(where(~ n_distinct(.) > 1))
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\win95pts.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- subset(df,select = lengths(sapply(df,unique))>1)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\munin.csv", header = TRUE, sep = ",", check.names = FALSE)
df1 <- subset(df,select = lengths(sapply(df,unique))>1)
df <- subset(df,select = lengths(sapply(df,unique))>1)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\munin.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- subset(df,select = lengths(sapply(df,unique))>1)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = "discrete")
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
library(sparsebn)
library(igraph)
library(graph)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\munin.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- subset(df,select = lengths(sapply(df,unique))>1)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = "discrete")
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
solution <- select(dags, edges = 1178)
print(solution)
edgelist <- to_igraph(solution)
x <- get.edgelist(edgelist$edges, names = TRUE)
write.csv(x,"C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\munin_sparsebn_16.91162_hours.csv", row.names = FALSE)
par(mfrow = c(1, 2), oma = rep(0, 4))
plotDAG(solution)
plot(solution,
layout = igraph::layout_(to_igraph(solution$edges), igraph::in_circle()),
vertex.label = NA,
vertex.size = 5,
vertex.label.color = gray(0),
vertex.color = gray(0.9),
edge.color = gray(0),
edge.arrow.size = 0.45
)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
scoreparameters(scoretype = c("bge", "bde", "bdecat", "usr"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
sp <-scoreparameters(scoretype = c("bge", "bde", "bdecat", "usr"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
BiocManager::install("Rgraphviz")
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
scorepar <-scoreparameters(scoretype = c("bge", "bde", "bdecat", "usr"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
scorepar <-scoreparameters(scoretype = c("bge", "bde", "bdecat", "usr"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorepar <-scoreparameters(scoretype = c("bde"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
x <- orderMCMC(scorepar, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorepar <-scoreparameters(scoretype = c("bdecat"), data,
bgepar = list(am = 1, aw = NULL),
bdepar = list(chi = 0.5, edgepf = 2),
bdecatpar = list(chi = 0.5, edgepf = 2),
dbnpar = list(samestruct = TRUE, slices = 2, b = 0),
usrpar = list(pctesttype = c("bge", "bde", "bdecat")),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
x <- orderMCMC(scorepar, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\andes.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorepar <-scoreparameters(scoretype = c("bdecat"), data,
bdecatpar = list(chi = 0.5, edgepf = 2),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
x <- orderMCMC(scorepar, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorepar <-scoreparameters(scoretype = c("bdecat"), data,
bdecatpar = list(chi = 0.5, edgepf = 2),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
x <- orderMCMC(scorepar, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <-scoreparameters(scoretype = c("bdecat"), data,
bdecatpar = list(chi = 0.5, edgepf = 2),
DBN = FALSE, weightvector = NULL, bgnodes = NULL, edgepmat = NULL,
nodeslabels = NULL)
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <-scoreparameters(scoretype = c("bdecat"), data,
bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\alarm.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <-scoreparameters(scoretype = c("bdecat"), data, bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
library(BiDAG)
data <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\barley.csv", header = TRUE, sep = ",", check.names = FALSE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
scorep <-scoreparameters(scoretype = c("bdecat"), data, bdecatpar = list(chi = 0.5, edgepf = 2))
x <- orderMCMC(scorep, MAP = TRUE, plus1 = TRUE, chainout = FALSE,
scoreout = FALSE, moveprobs = NULL, iterations = NULL, stepsave = NULL,
alpha = 0.05, cpdag = FALSE, gamma = 1, hardlimit = ifelse(plus1, 14, 20),
verbose = FALSE, startspace = NULL, blacklist = NULL,
startorder = NULL, scoretable = NULL)
n <- getDAG(x, amat = TRUE, cp = FALSE)
print(n)
View(data)
library(BiDAG)
library(igraph)
df <- read.csv("C:/Users/Jerzy/Documents/GitHub/sparsebndata/data/magic-irri.csv", header = TRUE, sep = ",", check.names = FALSE)
#df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
start_time <- Sys.time()
scorep <- scoreparameters(scoretype = c("bge"), data = df)
x <- orderMCMC(scorep)
end_time <- Sys.time()
print(end_time - start_time)
n <- getDAG(x, amat = TRUE, cp = FALSE)
g <- graph.adjacency(n)
el <- get.edgelist(g)
write.csv(el, "C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\magic-irri_bidag_r_seconds.csv", row.names=FALSE)
library(BiDAG)
library(igraph)
df <- read.csv("C:/Users/Jerzy/Documents/GitHub/sparsebndata/data/magic-niab.csv", header = TRUE, sep = ",", check.names = FALSE)
#df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
# bde for binary data, bdecat for categorical data, bge for continuous data and usr for a user-defined score
start_time <- Sys.time()
scorep <- scoreparameters(scoretype = c("bge"), data = df)
x <- orderMCMC(scorep)
end_time <- Sys.time()
print(end_time - start_time)
n <- getDAG(x, amat = TRUE, cp = FALSE)
g <- graph.adjacency(n)
el <- get.edgelist(g)
write.csv(el, "C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\magic-niab_bidag_6.791835_seconds.csv", row.names=FALSE)
library(sparsebn)
library(igraph)
library(graph)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\hailfinder.csv", header = TRUE, sep = ",", check.names = FALSE)
#df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = 'd')
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
library(sparsebn)
library(igraph)
library(graph)
df <- read.csv("C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\hailfinder.csv", header = TRUE, sep = ",", check.names = FALSE)
df <- as.data.frame(unclass(df), stringsAsFactors = TRUE)
dat <- sparsebnData(df, type = 'd')
start_time <- Sys.time()
dags <- estimate.dag(data = dat)
end_time <- Sys.time()
print(end_time - start_time)
print(dags)
solution <- select(dags, edges = 70)
print(solution)
edgelist <- to_igraph(solution)
x <- get.edgelist(edgelist$edges, names = TRUE)
par(mfrow = c(1, 2), oma = rep(0, 4))
plotDAG(solution)
plot(solution,
layout = igraph::layout_(to_igraph(solution$edges), igraph::in_circle()),
vertex.label = NA,
vertex.size = 5,
vertex.label.color = gray(0),
vertex.color = gray(0.9),
edge.color = gray(0),
edge.arrow.size = 0.45
)
write.csv(x, "C:\\Users\\Jerzy\\Documents\\GitHub\\sparsebndata\\data\\hailfinder_sparsebn.csv", row.names=FALSE)
# Loading
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "sangiovese.rds")
fileConn<-file("sangiovese.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "sangiovese.txt", append=TRUE)
}
}
ls
cd
library("readr")
library(bnlearn)
setwd('/Users/jerzykaminski/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "sangiovese.rds")
fileConn<-file("sangiovese.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "sangiovese.txt", append=TRUE)
}
}
library("readr")
library(bnlearn)
setwd('C:/Users/Jerzy/Documents/GitHub/sparsebndata/truenetworks/')
healthcare <- readRDS(file = "sangiovese.rds")
fileConn<-file("sangiovese.txt")
for (name in healthcare){
for (second in name$children){
line = paste(name$node,second)
write(line, file = "sangiovese.txt", append=TRUE)
}
}
